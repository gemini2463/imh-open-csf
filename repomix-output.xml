This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
imh-open-csf.conf
imh-open-csf.conf.sha256
imh-open-csf.php
imh-open-csf.php.sha256
imh-plugins.php
imh-plugins.php.sha256
index.php
index.php.sha256
install.sh
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
*logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

*node_modules
*dist
*dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="imh-open-csf.conf">
service=whostmgr
url=/cgi/imh-open-csf/index.php
user=root
phpHandler=/php/83/etc
features=any
displayname=OpenCSF
acls=any
entryurl=imh-open-csf/index.php
target=_self
icon=imh-open-csf.png
name=imh-open-csf
description=OpenCSF Plugin
</file>

<file path="imh-open-csf.conf.sha256">
0f6a226203d37a4e27a082980b949c89ac64200a2384ac71ff10a3f6590d0866  imh-open-csf.conf
</file>

<file path="imh-open-csf.php">
<?php
// OpenCSF
/**
 * OpenCSF plugin for cPanel/WHM and CWP
 *
 * Provides a web interface to view CSF settings,
 *
 * Compatible with:
 *   - cPanel/WHM: /usr/local/cpanel/whostmgr/docroot/cgi/imh-open-csf/index.php
 *   - CWP:       /usr/local/cwpsrv/htdocs/resources/admin/modules/imh-open-csf.php
 *
 * Maintainer: InMotion Hosting
 * Version: 0.1.7
 */


// ==========================
// 1. Environment Detection
// 2. Session & Security
// 3. HTML Header & CSS
// 4. Main Interface
// 5-9. Tabs
// 10. HTML Footer
// ==========================





// ==========================
// 1. Environment Detection
// ==========================

declare(strict_types=1);

$isCPanelServer = (
    (is_dir('/usr/local/cpanel') || is_dir('/var/cpanel') || is_dir('/etc/cpanel')) && (is_file('/usr/local/cpanel/cpanel') || is_file('/usr/local/cpanel/version'))
);

$isCWPServer = (
    is_dir('/usr/local/cwp')
);

if ($isCPanelServer) {
    if (getenv('REMOTE_USER') !== 'root') exit('Access Denied');

    if (session_status() === PHP_SESSION_NONE) {
        session_start();
    }
} else { // CWP
    if (!isset($_SESSION['logged']) || $_SESSION['logged'] != 1 || !isset($_SESSION['username']) || $_SESSION['username'] !== 'root') {
        exit('Access Denied');
    }
};










// ==========================
// 2. Session & Security
// ==========================

$CSRF_TOKEN = NULL;

if (!isset($_SESSION['csrf_token'])) {
    $CSRF_TOKEN = bin2hex(random_bytes(32));
    $_SESSION['csrf_token'] = $CSRF_TOKEN;
} else {
    $CSRF_TOKEN = $_SESSION['csrf_token'];
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (
        !isset($_POST['csrf_token'], $_SESSION['csrf_token']) ||
        !hash_equals($_SESSION['csrf_token'], $_POST['csrf_token'])
    ) {
        exit("Invalid CSRF token");
    }
}

define('IMH_SAR_CACHE_DIR', '/root/tmp/imh-open-csf');

if (!is_dir(IMH_SAR_CACHE_DIR)) {
    mkdir(IMH_SAR_CACHE_DIR, 0700, true);
}

// Clear old cache files

$cache_dir = IMH_SAR_CACHE_DIR;
$expire_seconds = 3600; // e.g. 1 hour

foreach (glob("$cache_dir/*.cache") as $file) {
    if (is_file($file) && (time() - filemtime($file) > $expire_seconds)) {
        unlink($file);
    }
}

function imh_safe_cache_filename($tag)
{
    return IMH_SAR_CACHE_DIR . '/sar_' . preg_replace('/[^a-zA-Z0-9_\-\.]/', '_', $tag) . '.cache';
}

/**
 * Returns the sar sample interval in seconds (default 600).
 */
function imh_guess_sar_interval()
{
    $cmd = "LANG=C sar -q 2>&1 | grep -E '^[0-9]{2}:[0-9]{2}:[0-9]{2}' | head -2 | awk '{print $1}'";
    $out = safe_shell_exec($cmd, 3);
    if (!is_string($out)) {
        return 600; // fallback if shell_exec failed
    }
    $lines = array_filter(array_map('trim', explode("\n", $out)));
    if (count($lines) < 2) return 600; // fallback
    $t1 = strtotime($lines[0]);
    $t2 = strtotime($lines[1]);
    if ($t1 === false || $t2 === false) return 600;
    $interval = $t2 - $t1;
    if ($interval > 0 && $interval < 3600) return $interval;
    return 600;
}

function imh_cached_shell_exec($tag, $command, $sar_interval)
{
    $cache_file = imh_safe_cache_filename($tag);



    if (file_exists($cache_file)) {
        if (fileowner($cache_file) !== 0) { // 0 = root
            unlink($cache_file);
            // treat as cache miss
        } else {
            $mtime = filemtime($cache_file);
            if (time() - $mtime < $sar_interval) {
                return file_get_contents($cache_file);
            }
        }
    }
    $out = shell_exec($command);
    if (strlen(trim($out))) {
        file_put_contents($cache_file, $out);
    }
    return $out;
}




// Runs a shell command safely with a timeout, preventing hangs.

function safe_shell_exec(string $command, int $timeout = 3): string
{
    static $timeout_bin = null;
    if ($timeout_bin === null) {
        // Find the timeout binary path once
        $found = trim(shell_exec('command -v timeout 2>/dev/null') ?: '');
        $timeout_bin = $found !== '' ? $found : false;
    }

    if ($timeout_bin) {
        // Only escape the path to timeout, not the actual command
        $cmd = escapeshellarg($timeout_bin) . ' ' . (int)$timeout . 's ' . $command;
        $out = shell_exec($cmd);
        return is_string($out) ? $out : '';
    }

    // Fallback: no timeout binary, use proc_open() with stream_select timeout
    $descriptorspec = [
        1 => ['pipe', 'w'],
        2 => ['pipe', 'w']
    ];
    $process = proc_open($command, $descriptorspec, $pipes);
    if (!is_resource($process)) return '';

    $output = '';
    $start = time();
    $readStreams = [$pipes[1], $pipes[2]];

    while (!empty($readStreams) && (time() - $start) < $timeout) {
        $readCopy = $readStreams;
        $write = null;
        $except = null;

        if (stream_select($readCopy, $write, $except, 1) > 0) {
            foreach ($readCopy as $stream) {
                $chunk = stream_get_contents($stream);
                if ($chunk !== false) {
                    $output .= $chunk;
                }
                $key = array_search($stream, $readStreams, true);
                unset($readStreams[$key]);
            }
        }
    }

    foreach ($pipes as $pipe) {
        fclose($pipe);
    }
    proc_terminate($process);
    proc_close($process);

    // Return raw output (don't trim so whitespace/newlines are preserved)
    return is_string($output) ? $output : '';
}














// Defaults and validation

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['reset_time'])) {
    // Reset to defaults
    $start_hour = 0;
    $start_min  = 0;
    $end_hour   = 23;
    $end_min    = 59;
} else {
    $start_hour = min(23, max(0, (int)($_POST['start_hour'] ?? 0)));
    $start_min  = min(59, max(0, (int)($_POST['start_min'] ?? 0)));
    $end_hour   = min(23, max(0, (int)($_POST['end_hour'] ?? 23)));
    $end_min    = min(59, max(0, (int)($_POST['end_min'] ?? 59)));
}









// Find local time

$server_time_full = safe_shell_exec('timedatectl', 2);
if (!$server_time_full) {
    $server_time = 'Time unavailable';
} else {
    $server_time_lines = explode("\n", trim($server_time_full));
    $server_time = $server_time_lines[0] ?? 'Time unavailable';
}








// ==========================
// 3. HTML Header & CSS
// ==========================

if ($isCPanelServer) {
    require_once('/usr/local/cpanel/php/WHM.php');
    WHM::header('OpenCSF WHM Interface', 0, 0);
} else {
    echo '<div class="panel-body">';
};








// Styles for the tabs and buttons

?>

<style>
    .panel-body a,
    .imh-box a,
    .imh-footer-box a,
    .imh-box--narrow a,
    .panel-body a,
    .imh-box a,
    .imh-footer-box a,
    .imh-box--narrow a {
        color: #C52227;
    }

    .panel-body a:hover,
    .imh-box a:hover,
    .imh-footer-box a:hover,
    .imh-box--narrow a:hover,
    .panel-body a:focus,
    .imh-box a:focus,
    .imh-footer-box a:focus,
    .imh-box--narrow a:focus {
        color: #d33a41;
    }

    .imh-btn {
        margin-left: 15px;
        padding: 5px 15px;
        border-radius: 6px;
    }

    .imh-red-btn {
        background: #C52227;
        color: #fff;
        border: none;
    }

    .imh-piechart-col {
        vertical-align: top;
    }

    .imh-title {
        margin: 0.25em 0 1em 0;
    }

    .imh-title-img {
        margin-right: 0.5em;
    }

    .open-csf-tables {
        border-collapse: collapse;
        margin: 2em 0;
        background: #fafcff;
    }

    .open-csf-tables,
    .open-csf-tables th,
    .open-csf-tables td {
        border: 1px solid #000;
    }

    .open-csf-tables th,
    .open-csf-tables td {
        padding: 4px 8px;
    }

    .open-csf-tables thead {
        background: #e6f2ff;
        color: #333;
        font-weight: 600;
    }

    .open-csf-tables tr.odd-num-table-row {
        background: #f4f4f4;
    }

    .tabs-nav {
        display: flex;
        border-bottom: 1px solid #e3e3e3;
        margin-bottom: 2em;
    }

    .tabs-nav button {
        border: none;
        background: #f8f8f8;
        color: #333;
        padding: 12px 28px;
        cursor: pointer;
        border-top-left-radius: 6px;
        border-top-right-radius: 6px;
        font-size: 1em;
        margin-bottom: -1px;
        border-bottom: 2px solid transparent;
        transition: background 0.15s, border-color 0.15s;
    }

    .tabs-nav button.active {
        background: #fff;
        border-bottom: 2px solid #C52227;
        color: #C52227;
        font-weight: 600;
    }

    .tab-content {
        display: none;
    }

    .tab-content.active {
        display: block;
    }

    .imh-status {
        display: inline-block;
        padding: 6px 18px;
        border-radius: 14px;
        font-weight: 600;
        margin-right: 18px;
        border: 1px solid;
    }

    .imh-status-running {
        background: #e6ffee;
        color: #26a042;
        border-color: #8fd19e;
    }

    .imh-status-notrunning {
        background: #ffeaea;
        color: #c22626;
        border-color: #e99;
    }

    .imh-box {
        margin: 2em 0;
        padding: 1em;
        border: 1px solid #ccc;
        border-radius: 8px;
        display: block;
        background: #f9f9f9;
    }

    .imh-width-full {
        table-layout: fixed;
        width: 100%;
    }

    .imh-box--narrow {
        margin: 1em 0 1em 0;
        padding: 1em;
        border: 1px solid #ccc;
        border-radius: 8px;
        display: block;
        background: #f9f9f9;
    }

    .imh-box--footer {
        margin: 2em 0 2em 0;
        padding: 1em;
        border: 1px solid #ccc;
        border-radius: 8px;
        display: block;
    }

    .imh-pre {
        background: #f8f8f8;
        border: 1px solid #ccc;
        padding: 1em;
        margin: 2em;
    }

    .imh-server-time {
        margin-left: 1em;
        color: #444;
        font-weight: 600;
    }

    .imh-spacer {
        margin-top: 2em;
    }

    .imh-user-section {
        display: block;
        padding: 0.5em 1em;
        border-top: 1px solid black;
    }

    .imh-user-name {
        color: rgb(42, 73, 94);
    }

    .imh-table-alt {
        background: #f4f4f4;
    }

    .imh-alert {
        color: #c00;
        margin: 1em;
    }

    .imh-footer-img {
        margin-bottom: 1em;
    }

    .imh-footer-box {
        margin: 2em 0 2em 0;
        padding: 1em;
        border: 1px solid #ccc;
        border-radius: 8px;
        display: block;
        background: #f9f9f9;
    }

    .imh-small-note {
        font-size: 0.9em;
        color: #555;
    }

    .text-right {
        text-align: right;
    }

    .imh-monospace {
        font-family: monospace;
    }

    .imh-box.margin-bottom {
        margin-bottom: 1em;
    }

    .imh-pid {
        color: #888;
    }

    .panel-body {
        padding-bottom: 5px;
        display: block;
    }

    .imh-collapsible-content {
        max-height: 33333px;
        overflow: hidden;
        transition: max-height 0.3s ease;
    }

    .imh-collapsible-content[aria-hidden="true"] {
        max-height: 0;
    }

    .imh-toggle-btn {
        background: #eee;
        border: 1px solid #999;
        border-radius: 4px;
        cursor: pointer;
        margin-left: 0.5em;
        padding: 2px 10px;
        font-family: monospace;
        font-size: larger;
    }

    .imh-toggle-btn:hover {
        background: #ddd;
        font-weight: bold;
        color: #333;
    }

    .imh-larger-text {
        font-size: 1.5em;
    }

    .imh-table-responsive {
        width: 100%;
        overflow-x: auto;
    }

    @media (max-width: 600px) {

        .open-csf-tables,
        .imh-box,
        .imh-box--narrow,
        .imh-footer-box {
            width: 100% !important;
            min-width: 350px;
            font-size: 0.97em;
        }

        .imh-piechart-col {
            width: 100% !important;
            display: block;
            box-sizing: border-box;
        }

        .open-csf-tables th,
        .open-csf-tables td {
            padding: 4px 4px;
        }

        /* Optionally stack the pie chart columns vertically */
        .open-csf-tables tr {
            display: flex;
            flex-direction: column;
        }
    }

    .chart-container {
        max-height: 800px !important;
        max-width: 800px !important;
        display: block;
        margin-left: auto;
        margin-right: auto;
        background: #fff;
    }

    #PiechartUsersCPU,
    #PiechartUsersMemory {
        width: 100% !important;
        max-width: 100%;
    }
</style>

<?php





// ==========================
// 4. Main Interface
// ==========================

$img_src = $isCWPServer ? 'design/img/imh-open-csf.png' : 'imh-open-csf.png';
echo '<h1 class="imh-title"><img src="' . htmlspecialchars($img_src) . '" alt="open-csf" class="imh-title-img" />OpenCSF</h1>';



// This is the tab selector.

echo '<div class="tabs-nav" id="imh-tabs-nav">
    <button type="button" class="active" data-tab="tab-all" aria-label="All tab">All</button>
    <button type="button" data-tab="tab-info" aria-label="Info tab">Info</button>
    <button type="button" data-tab="tab-csf" aria-label="csf tab">csf</button>
    <button type="button" data-tab="tab-lfd" aria-label="lfd tab">lfd</button>
    <button type="button" data-tab="tab-other" aria-label="Other tab">Other</button>
</div>';





// Tab selector script

?>

<script>
    // Tab navigation functionality

    document.querySelectorAll('#imh-tabs-nav button').forEach(function(btn) {
        btn.addEventListener('click', function() {
            // Remove 'active' class from all buttons and tab contents
            document.querySelectorAll('#imh-tabs-nav button').forEach(btn2 => btn2.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
            // Activate this button and the corresponding tab
            btn.classList.add('active');
            var tabId = btn.getAttribute('data-tab');
            document.getElementById(tabId).classList.add('active');
        });
    });

    // Each section can be collapsed or expanded with a button.

    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.imh-toggle-btn').forEach(function(btn) {
            btn.addEventListener('click', function() {
                var targetId = btn.getAttribute('data-target');
                var collapsed = btn.getAttribute('data-collapsed') === '1';
                var content = document.getElementById(targetId);

                if (collapsed) {
                    // Expand
                    content.setAttribute('aria-hidden', 'false');
                    btn.innerText = '[–]';
                    btn.setAttribute('data-collapsed', '0');
                    btn.setAttribute('aria-expanded', 'true');
                } else {
                    // Collapse
                    content.setAttribute('aria-hidden', 'true');
                    btn.innerText = '[+]';
                    btn.setAttribute('data-collapsed', '1');
                    btn.setAttribute('aria-expanded', 'false');
                }
            });
        });
    });
</script>
<?php






// ==========================
// 5. 'All' Tab
// ==========================

echo '<div id="tab-all" class="tab-content active">';
echo '<h1>All</h1>';





//End of 'All' tab content
echo "</div>";








// ==========================
// 6. 'Info' Tab
// ==========================

echo '<div id="tab-info" class="tab-content">';
echo '<h1>Info</h1>';






//End of 'Info' tab content
echo "</div>";









// ==========================
// 7. 'csf' Tab
// ==========================

echo '<div id="tab-csf" class="tab-content">';
echo '<h1>csf</h1>';






//End of 'csf' tab content
echo "</div>";









// ==========================
// 8. 'lfd' Tab
// ==========================

echo '<div id="tab-lfd" class="tab-content">';
echo '<h1>lfd</h1>';






//End of 'lfd' tab content
echo "</div>";









// ==========================
// 9. 'Other' Tab
// ==========================

echo '<div id="tab-other" class="tab-content">';
echo '<h1>Other</h1>';






//End of 'Other' tab content
echo "</div>";



















// ==========================
// 10. HTML Footer
// ==========================

echo '<div class="imh-footer-box"><img src="' . htmlspecialchars($img_src) . '" alt="open-csf" class="imh-footer-img" /><p><a href="https://configserver.com/configserver-security-and-firewall/" target="_blank">ConfigServer Security and Firewall</a> by Way to the Web Ltd.</p><p>Plugin by <a href="https://inmotionhosting.com" target="_blank">InMotion Hosting</a>.</p></div>';




if ($isCPanelServer) {
    WHM::footer();
} else {
    echo '</div>';
};
</file>

<file path="imh-open-csf.php.sha256">
c902884d7fb249994b0da1a54d5c35bdab08625efc6a9ddcc41b5f5cdb827eae  imh-open-csf.php
</file>

<file path="imh-plugins.php">
<?php
//This file is used to dynamically generate the admin panel menu for IMH plugins

$plugin_dir = '/usr/local/cwpsrv/htdocs/resources/admin/modules/';
$plugins = [];

foreach (glob($plugin_dir . 'imh-*.php') as $filename) {
    $system = basename($filename, '.php');
    // Get the second line from the file (title)
    $lines = file($filename);
    $title = isset($lines[1]) ? trim(preg_replace('/^\/\/\s*/', '', $lines[1])) : $system;
    $plugins[] = [
        'system' => $system,
        'title' => $title
    ];
}
?>

<script type="text/javascript">
    $(document).ready(function() {
        var newButtons = '' +
            ' <li>' +
            ' <a href="#" class="hasUl"><span aria-hidden="true" class="icon16 icomoon-icon-hammer"></span>IMH Plugins<span class="hasDrop icon16 icomoon-icon-arrow-down-2"></span></a>' +
            '      <ul class="sub">';
        <?php foreach ($plugins as $plugin): ?>
            newButtons += '<li><a href="index.php?module=<?php echo $plugin['system']; ?>"><span class="icon16 icomoon-icon-arrow-right-3"></span><?php echo htmlspecialchars($plugin['title']); ?></a></li>';
        <?php endforeach; ?>
        newButtons += '      </ul>' +
            '</li>';
        $(".mainnav > ul").append(newButtons);
    });
</script>
</file>

<file path="imh-plugins.php.sha256">
c8b15737f85b76e1510f7321bdf4b92bdc61e4790d5fec3bef0b142b0efe8cbf  imh-plugins.php
</file>

<file path="index.php">
<?php
// OpenCSF
/**
 * OpenCSF plugin for cPanel/WHM and CWP
 *
 * Provides a web interface to view CSF settings,
 *
 * Compatible with:
 *   - cPanel/WHM: /usr/local/cpanel/whostmgr/docroot/cgi/imh-open-csf/index.php
 *   - CWP:       /usr/local/cwpsrv/htdocs/resources/admin/modules/imh-open-csf.php
 *
 * Maintainer: InMotion Hosting
 * Version: 0.1.7
 */


// ==========================
// 1. Environment Detection
// 2. Session & Security
// 3. HTML Header & CSS
// 4. Main Interface
// 5-9. Tabs
// 10. HTML Footer
// ==========================





// ==========================
// 1. Environment Detection
// ==========================

declare(strict_types=1);

$isCPanelServer = (
    (is_dir('/usr/local/cpanel') || is_dir('/var/cpanel') || is_dir('/etc/cpanel')) && (is_file('/usr/local/cpanel/cpanel') || is_file('/usr/local/cpanel/version'))
);

$isCWPServer = (
    is_dir('/usr/local/cwp')
);

if ($isCPanelServer) {
    if (getenv('REMOTE_USER') !== 'root') exit('Access Denied');

    if (session_status() === PHP_SESSION_NONE) {
        session_start();
    }
} else { // CWP
    if (!isset($_SESSION['logged']) || $_SESSION['logged'] != 1 || !isset($_SESSION['username']) || $_SESSION['username'] !== 'root') {
        exit('Access Denied');
    }
};










// ==========================
// 2. Session & Security
// ==========================

$CSRF_TOKEN = NULL;

if (!isset($_SESSION['csrf_token'])) {
    $CSRF_TOKEN = bin2hex(random_bytes(32));
    $_SESSION['csrf_token'] = $CSRF_TOKEN;
} else {
    $CSRF_TOKEN = $_SESSION['csrf_token'];
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (
        !isset($_POST['csrf_token'], $_SESSION['csrf_token']) ||
        !hash_equals($_SESSION['csrf_token'], $_POST['csrf_token'])
    ) {
        exit("Invalid CSRF token");
    }
}

define('IMH_SAR_CACHE_DIR', '/root/tmp/imh-open-csf');

if (!is_dir(IMH_SAR_CACHE_DIR)) {
    mkdir(IMH_SAR_CACHE_DIR, 0700, true);
}

// Clear old cache files

$cache_dir = IMH_SAR_CACHE_DIR;
$expire_seconds = 3600; // e.g. 1 hour

foreach (glob("$cache_dir/*.cache") as $file) {
    if (is_file($file) && (time() - filemtime($file) > $expire_seconds)) {
        unlink($file);
    }
}

function imh_safe_cache_filename($tag)
{
    return IMH_SAR_CACHE_DIR . '/sar_' . preg_replace('/[^a-zA-Z0-9_\-\.]/', '_', $tag) . '.cache';
}

/**
 * Returns the sar sample interval in seconds (default 600).
 */
function imh_guess_sar_interval()
{
    $cmd = "LANG=C sar -q 2>&1 | grep -E '^[0-9]{2}:[0-9]{2}:[0-9]{2}' | head -2 | awk '{print $1}'";
    $out = safe_shell_exec($cmd, 3);
    if (!is_string($out)) {
        return 600; // fallback if shell_exec failed
    }
    $lines = array_filter(array_map('trim', explode("\n", $out)));
    if (count($lines) < 2) return 600; // fallback
    $t1 = strtotime($lines[0]);
    $t2 = strtotime($lines[1]);
    if ($t1 === false || $t2 === false) return 600;
    $interval = $t2 - $t1;
    if ($interval > 0 && $interval < 3600) return $interval;
    return 600;
}

function imh_cached_shell_exec($tag, $command, $sar_interval)
{
    $cache_file = imh_safe_cache_filename($tag);



    if (file_exists($cache_file)) {
        if (fileowner($cache_file) !== 0) { // 0 = root
            unlink($cache_file);
            // treat as cache miss
        } else {
            $mtime = filemtime($cache_file);
            if (time() - $mtime < $sar_interval) {
                return file_get_contents($cache_file);
            }
        }
    }
    $out = shell_exec($command);
    if (strlen(trim($out))) {
        file_put_contents($cache_file, $out);
    }
    return $out;
}




// Runs a shell command safely with a timeout, preventing hangs.

function safe_shell_exec(string $command, int $timeout = 3): string
{
    static $timeout_bin = null;
    if ($timeout_bin === null) {
        // Find the timeout binary path once
        $found = trim(shell_exec('command -v timeout 2>/dev/null') ?: '');
        $timeout_bin = $found !== '' ? $found : false;
    }

    if ($timeout_bin) {
        // Only escape the path to timeout, not the actual command
        $cmd = escapeshellarg($timeout_bin) . ' ' . (int)$timeout . 's ' . $command;
        $out = shell_exec($cmd);
        return is_string($out) ? $out : '';
    }

    // Fallback: no timeout binary, use proc_open() with stream_select timeout
    $descriptorspec = [
        1 => ['pipe', 'w'],
        2 => ['pipe', 'w']
    ];
    $process = proc_open($command, $descriptorspec, $pipes);
    if (!is_resource($process)) return '';

    $output = '';
    $start = time();
    $readStreams = [$pipes[1], $pipes[2]];

    while (!empty($readStreams) && (time() - $start) < $timeout) {
        $readCopy = $readStreams;
        $write = null;
        $except = null;

        if (stream_select($readCopy, $write, $except, 1) > 0) {
            foreach ($readCopy as $stream) {
                $chunk = stream_get_contents($stream);
                if ($chunk !== false) {
                    $output .= $chunk;
                }
                $key = array_search($stream, $readStreams, true);
                unset($readStreams[$key]);
            }
        }
    }

    foreach ($pipes as $pipe) {
        fclose($pipe);
    }
    proc_terminate($process);
    proc_close($process);

    // Return raw output (don't trim so whitespace/newlines are preserved)
    return is_string($output) ? $output : '';
}














// Defaults and validation

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['reset_time'])) {
    // Reset to defaults
    $start_hour = 0;
    $start_min  = 0;
    $end_hour   = 23;
    $end_min    = 59;
} else {
    $start_hour = min(23, max(0, (int)($_POST['start_hour'] ?? 0)));
    $start_min  = min(59, max(0, (int)($_POST['start_min'] ?? 0)));
    $end_hour   = min(23, max(0, (int)($_POST['end_hour'] ?? 23)));
    $end_min    = min(59, max(0, (int)($_POST['end_min'] ?? 59)));
}









// Find local time

$server_time_full = safe_shell_exec('timedatectl', 2);
if (!$server_time_full) {
    $server_time = 'Time unavailable';
} else {
    $server_time_lines = explode("\n", trim($server_time_full));
    $server_time = $server_time_lines[0] ?? 'Time unavailable';
}








// ==========================
// 3. HTML Header & CSS
// ==========================

if ($isCPanelServer) {
    require_once('/usr/local/cpanel/php/WHM.php');
    WHM::header('OpenCSF WHM Interface', 0, 0);
} else {
    echo '<div class="panel-body">';
};








// Styles for the tabs and buttons

?>

<style>
    .panel-body a,
    .imh-box a,
    .imh-footer-box a,
    .imh-box--narrow a,
    .panel-body a,
    .imh-box a,
    .imh-footer-box a,
    .imh-box--narrow a {
        color: #C52227;
    }

    .panel-body a:hover,
    .imh-box a:hover,
    .imh-footer-box a:hover,
    .imh-box--narrow a:hover,
    .panel-body a:focus,
    .imh-box a:focus,
    .imh-footer-box a:focus,
    .imh-box--narrow a:focus {
        color: #d33a41;
    }

    .imh-btn {
        margin-left: 15px;
        padding: 5px 15px;
        border-radius: 6px;
    }

    .imh-red-btn {
        background: #C52227;
        color: #fff;
        border: none;
    }

    .imh-piechart-col {
        vertical-align: top;
    }

    .imh-title {
        margin: 0.25em 0 1em 0;
    }

    .imh-title-img {
        margin-right: 0.5em;
    }

    .open-csf-tables {
        border-collapse: collapse;
        margin: 2em 0;
        background: #fafcff;
    }

    .open-csf-tables,
    .open-csf-tables th,
    .open-csf-tables td {
        border: 1px solid #000;
    }

    .open-csf-tables th,
    .open-csf-tables td {
        padding: 4px 8px;
    }

    .open-csf-tables thead {
        background: #e6f2ff;
        color: #333;
        font-weight: 600;
    }

    .open-csf-tables tr.odd-num-table-row {
        background: #f4f4f4;
    }

    .tabs-nav {
        display: flex;
        border-bottom: 1px solid #e3e3e3;
        margin-bottom: 2em;
    }

    .tabs-nav button {
        border: none;
        background: #f8f8f8;
        color: #333;
        padding: 12px 28px;
        cursor: pointer;
        border-top-left-radius: 6px;
        border-top-right-radius: 6px;
        font-size: 1em;
        margin-bottom: -1px;
        border-bottom: 2px solid transparent;
        transition: background 0.15s, border-color 0.15s;
    }

    .tabs-nav button.active {
        background: #fff;
        border-bottom: 2px solid #C52227;
        color: #C52227;
        font-weight: 600;
    }

    .tab-content {
        display: none;
    }

    .tab-content.active {
        display: block;
    }

    .imh-status {
        display: inline-block;
        padding: 6px 18px;
        border-radius: 14px;
        font-weight: 600;
        margin-right: 18px;
        border: 1px solid;
    }

    .imh-status-running {
        background: #e6ffee;
        color: #26a042;
        border-color: #8fd19e;
    }

    .imh-status-notrunning {
        background: #ffeaea;
        color: #c22626;
        border-color: #e99;
    }

    .imh-box {
        margin: 2em 0;
        padding: 1em;
        border: 1px solid #ccc;
        border-radius: 8px;
        display: block;
        background: #f9f9f9;
    }

    .imh-width-full {
        table-layout: fixed;
        width: 100%;
    }

    .imh-box--narrow {
        margin: 1em 0 1em 0;
        padding: 1em;
        border: 1px solid #ccc;
        border-radius: 8px;
        display: block;
        background: #f9f9f9;
    }

    .imh-box--footer {
        margin: 2em 0 2em 0;
        padding: 1em;
        border: 1px solid #ccc;
        border-radius: 8px;
        display: block;
    }

    .imh-pre {
        background: #f8f8f8;
        border: 1px solid #ccc;
        padding: 1em;
        margin: 2em;
    }

    .imh-server-time {
        margin-left: 1em;
        color: #444;
        font-weight: 600;
    }

    .imh-spacer {
        margin-top: 2em;
    }

    .imh-user-section {
        display: block;
        padding: 0.5em 1em;
        border-top: 1px solid black;
    }

    .imh-user-name {
        color: rgb(42, 73, 94);
    }

    .imh-table-alt {
        background: #f4f4f4;
    }

    .imh-alert {
        color: #c00;
        margin: 1em;
    }

    .imh-footer-img {
        margin-bottom: 1em;
    }

    .imh-footer-box {
        margin: 2em 0 2em 0;
        padding: 1em;
        border: 1px solid #ccc;
        border-radius: 8px;
        display: block;
        background: #f9f9f9;
    }

    .imh-small-note {
        font-size: 0.9em;
        color: #555;
    }

    .text-right {
        text-align: right;
    }

    .imh-monospace {
        font-family: monospace;
    }

    .imh-box.margin-bottom {
        margin-bottom: 1em;
    }

    .imh-pid {
        color: #888;
    }

    .panel-body {
        padding-bottom: 5px;
        display: block;
    }

    .imh-collapsible-content {
        max-height: 33333px;
        overflow: hidden;
        transition: max-height 0.3s ease;
    }

    .imh-collapsible-content[aria-hidden="true"] {
        max-height: 0;
    }

    .imh-toggle-btn {
        background: #eee;
        border: 1px solid #999;
        border-radius: 4px;
        cursor: pointer;
        margin-left: 0.5em;
        padding: 2px 10px;
        font-family: monospace;
        font-size: larger;
    }

    .imh-toggle-btn:hover {
        background: #ddd;
        font-weight: bold;
        color: #333;
    }

    .imh-larger-text {
        font-size: 1.5em;
    }

    .imh-table-responsive {
        width: 100%;
        overflow-x: auto;
    }

    @media (max-width: 600px) {

        .open-csf-tables,
        .imh-box,
        .imh-box--narrow,
        .imh-footer-box {
            width: 100% !important;
            min-width: 350px;
            font-size: 0.97em;
        }

        .imh-piechart-col {
            width: 100% !important;
            display: block;
            box-sizing: border-box;
        }

        .open-csf-tables th,
        .open-csf-tables td {
            padding: 4px 4px;
        }

        /* Optionally stack the pie chart columns vertically */
        .open-csf-tables tr {
            display: flex;
            flex-direction: column;
        }
    }

    .chart-container {
        max-height: 800px !important;
        max-width: 800px !important;
        display: block;
        margin-left: auto;
        margin-right: auto;
        background: #fff;
    }

    #PiechartUsersCPU,
    #PiechartUsersMemory {
        width: 100% !important;
        max-width: 100%;
    }
</style>

<?php





// ==========================
// 4. Main Interface
// ==========================

$img_src = $isCWPServer ? 'design/img/imh-open-csf.png' : 'imh-open-csf.png';
echo '<h1 class="imh-title"><img src="' . htmlspecialchars($img_src) . '" alt="open-csf" class="imh-title-img" />OpenCSF</h1>';



// This is the tab selector.

echo '<div class="tabs-nav" id="imh-tabs-nav">
    <button type="button" class="active" data-tab="tab-all" aria-label="All tab">All</button>
    <button type="button" data-tab="tab-info" aria-label="Info tab">Info</button>
    <button type="button" data-tab="tab-csf" aria-label="csf tab">csf</button>
    <button type="button" data-tab="tab-lfd" aria-label="lfd tab">lfd</button>
    <button type="button" data-tab="tab-other" aria-label="Other tab">Other</button>
</div>';





// Tab selector script

?>

<script>
    // Tab navigation functionality

    document.querySelectorAll('#imh-tabs-nav button').forEach(function(btn) {
        btn.addEventListener('click', function() {
            // Remove 'active' class from all buttons and tab contents
            document.querySelectorAll('#imh-tabs-nav button').forEach(btn2 => btn2.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
            // Activate this button and the corresponding tab
            btn.classList.add('active');
            var tabId = btn.getAttribute('data-tab');
            document.getElementById(tabId).classList.add('active');
        });
    });

    // Each section can be collapsed or expanded with a button.

    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.imh-toggle-btn').forEach(function(btn) {
            btn.addEventListener('click', function() {
                var targetId = btn.getAttribute('data-target');
                var collapsed = btn.getAttribute('data-collapsed') === '1';
                var content = document.getElementById(targetId);

                if (collapsed) {
                    // Expand
                    content.setAttribute('aria-hidden', 'false');
                    btn.innerText = '[–]';
                    btn.setAttribute('data-collapsed', '0');
                    btn.setAttribute('aria-expanded', 'true');
                } else {
                    // Collapse
                    content.setAttribute('aria-hidden', 'true');
                    btn.innerText = '[+]';
                    btn.setAttribute('data-collapsed', '1');
                    btn.setAttribute('aria-expanded', 'false');
                }
            });
        });
    });
</script>
<?php






// ==========================
// 5. 'All' Tab
// ==========================

echo '<div id="tab-all" class="tab-content active">';
echo '<h1>All</h1>';





//End of 'All' tab content
echo "</div>";








// ==========================
// 6. 'Info' Tab
// ==========================

echo '<div id="tab-info" class="tab-content">';
echo '<h1>Info</h1>';






//End of 'Info' tab content
echo "</div>";









// ==========================
// 7. 'csf' Tab
// ==========================

echo '<div id="tab-csf" class="tab-content">';
echo '<h1>csf</h1>';






//End of 'csf' tab content
echo "</div>";









// ==========================
// 8. 'lfd' Tab
// ==========================

echo '<div id="tab-lfd" class="tab-content">';
echo '<h1>lfd</h1>';






//End of 'lfd' tab content
echo "</div>";









// ==========================
// 9. 'Other' Tab
// ==========================

echo '<div id="tab-other" class="tab-content">';
echo '<h1>Other</h1>';






//End of 'Other' tab content
echo "</div>";



















// ==========================
// 10. HTML Footer
// ==========================

echo '<div class="imh-footer-box"><img src="' . htmlspecialchars($img_src) . '" alt="open-csf" class="imh-footer-img" /><p><a href="https://configserver.com/configserver-security-and-firewall/" target="_blank">ConfigServer Security and Firewall</a> by Way to the Web Ltd.</p><p>Plugin by <a href="https://inmotionhosting.com" target="_blank">InMotion Hosting</a>.</p></div>';




if ($isCPanelServer) {
    WHM::footer();
} else {
    echo '</div>';
};
</file>

<file path="index.php.sha256">
c902884d7fb249994b0da1a54d5c35bdab08625efc6a9ddcc41b5f5cdb827eae  index.php
</file>

<file path="README.md">
# OpenCSF (imh-open-csf), v0.0.1

OpenCSF plugin for cPanel/WHM and CWP

- cPanel/WHM path: `/usr/local/cpanel/whostmgr/docroot/cgi/imh-open-csf/index.php`
- CWP path: `/usr/local/cwpsrv/htdocs/resources/admin/modules/imh-open-csf.php`

# Installation

- Run as the Root user: `curl -fsSL https://raw.githubusercontent.com/gemini2463/imh-open-csf/master/install.sh | sh`

# Files

## Shell installer

- install.sh

## Main script

- index.php - Identical to `imh-open-csf.php`.
- index.php.sha256 - `sha256sum index.php > index.php.sha256`
- imh-open-csf.php - Identical to `index.php`.
- imh-open-csf.php.sha256 - `sha256sum imh-open-csf.php > imh-open-csf.php.sha256`

## Icon

- imh-open-csf.png - [48x48 png image](https://api.docs.cpanel.net/guides/guide-to-whm-plugins/guide-to-whm-plugins-plugin-files/#icons)
- imh-open-csf.png.sha256 - `sha256sum imh-open-csf.png > imh-open-csf.png.sha256`

## cPanel conf

- imh-open-csf.conf - [AppConfig Configuration File](https://api.docs.cpanel.net/guides/guide-to-whm-plugins/guide-to-whm-plugins-appconfig-configuration-file)
- imh-open-csf.conf.sha256 - `sha256sum imh-open-csf.conf > imh-open-csf.conf.sha256`

## CWP include

- imh-plugins.php - [CWP include](https://wiki.centos-webpanel.com/how-to-build-a-cwp-module)
- imh-plugins.php.sha256 - `sha256sum imh-plugins.php > imh-plugins.php.sha256`

## sha256 one-liner

- `for file in index.php imh-plugins.php imh-open-csf.conf imh-open-csf.php imh-open-csf.png; do sha256sum "$file" > "$file.sha256"; done`
</file>

<file path="install.sh">
#!/bin/bash

# Exit on error, undefined variables, pipe failures
set -euo pipefail

# Enable debugging output
#set -x

# Script metadata
readonly SCRIPT_VERSION="0.0.1"
readonly SCRIPT_NAME="imh-open-csf"
readonly BASE_URL="https://raw.githubusercontent.com/gemini2463/$SCRIPT_NAME/master"

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly BRIGHTBLUE='\033[1;34m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Function to check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error_exit "This script must be run as root"
    fi
}

# Function to print colored output
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to handle errors
error_exit() {
    print_message "$RED" "ERROR: $1" >&2
    cleanup
    exit 1
}

cleanup() {
    # Only try to clean up if TEMP_DIR is set, non-empty, and is a directory
    if [[ -n "${TEMP_DIR:-}" && -d "$TEMP_DIR" ]]; then
        rm -rf "$TEMP_DIR"
    fi
}

# Set up trap to ensure cleanup on exit
trap cleanup EXIT INT TERM

# Function to detect control panel
detect_control_panel() {
    if [[ (-d /usr/local/cpanel || -d /var/cpanel || -d /etc/cpanel) &&
        (-f /usr/local/cpanel/cpanel || -f /usr/local/cpanel/version) ]]; then
        echo "cpanel"
    elif [[ -d /usr/local/cwpsrv ]]; then
        echo "cwp"
    else
        echo "none"
    fi
}

if [[ "${1:-}" == "--uninstall" ]]; then
    uninstall_main() {
        echo -e "\033[0;31mUninstalling $SCRIPT_NAME...\033[0m"
        echo ""

        # Detect control panel type
        local panel=$(detect_control_panel)

        case "$panel" in
        "cpanel")
            echo "Removing cPanel plugin files..."
            rm -rf "/usr/local/cpanel/whostmgr/docroot/cgi/$SCRIPT_NAME"
            rm -f "/usr/local/cpanel/whostmgr/docroot/addon_plugins/$SCRIPT_NAME.png"
            # rm -f "/var/cpanel/apps/$SCRIPT_NAME.conf"
            if [[ -x "/usr/local/cpanel/bin/unregister_appconfig" ]]; then
                /usr/local/cpanel/bin/unregister_appconfig "$SCRIPT_NAME" || true
            fi
            ;;
        "cwp")
            echo "Removing CWP plugin files..."
            rm -f "/usr/local/cwpsrv/htdocs/resources/admin/modules/$SCRIPT_NAME.php"
            rm -f "/usr/local/cwpsrv/htdocs/admin/design/img/$SCRIPT_NAME.png"
            # rm -f "/usr/local/cwpsrv/htdocs/resources/admin/include/imh-plugins.php"
            # Optional: remove line from 3rdparty.php
            # sed -i "/imh-plugins.php/d" "/usr/local/cwpsrv/htdocs/resources/admin/include/3rdparty.php" || true
            ;;
        *)
            echo "Removing plain install files..."
            rm -rf "/root/$SCRIPT_NAME"
            ;;
        esac

        echo ""
        echo -e "\033[0;32mUninstall complete.\033[0m"
        exit 0
    }

    uninstall_main
fi

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to validate URL is accessible
validate_url() {
    local url=$1
    if ! wget --spider -q "$url" 2>/dev/null; then
        error_exit "Cannot access URL: $url"
    fi
}

# Function to download file with validation
download_file() {
    local url=$1
    local destination=$2

    if [[ -d "$destination" ]]; then
        print_message "$RED" "Destination is a directory, not a file: $destination"
        return 1
    fi

    # Get the final HTTP code after redirects
    local http_code
    http_code=$(wget --server-response --spider "$url" 2>&1 | awk '/^  HTTP|^HTTP/{code=$2} END{print code}')
    #print_message "$YELLOW" "HTTP status code for $url: $http_code"

    if [[ -z "$http_code" ]]; then
        print_message "$RED" "Could not get HTTP code for $url"
        return 1
    fi
    if [[ "$http_code" != "200" ]]; then
        print_message "$RED" "File not found or inaccessible (HTTP $http_code): $url"
        return 1
    fi

    if wget -q -O "$destination" "$url"; then
        if [[ -s "$destination" ]]; then
            print_message "$GREEN" "Downloaded $url to $destination"
            return 0
        fi
        rm -f "$destination"
        print_message "$RED" "Downloaded file is empty: $url"
        return 1
    else
        print_message "$RED" "Download failed for $url (HTTP $http_code)"
        return 1
    fi
}

download_file_with_checksum() {
    local url="$1"
    local destination="$2"

    # Download the actual file
    download_file "$url" "$destination" || return 1

    # Download the checksum file (to match destination)
    download_file "${url}.sha256" "${destination}.sha256" || return 1

    # Adjust the filename in the checksum file, if necessary
    local expected_name=$(basename "$url")
    local dest_name=$(basename "$destination")
    if [[ "$expected_name" != "$dest_name" ]]; then
        sed -i "s/^\([a-fA-F0-9]*[[:space:]]\+\).*\$/\1$dest_name/" "${destination}.sha256"
    fi

    # Verify the checksum
    (
        cd "$(dirname "$destination")"
        if ! sha256sum -c "$(basename "$destination").sha256" --status; then
            print_message "$RED" "Checksum verification FAILED for $(basename "$destination")"
            rm -f "$destination"
            exit 1
        fi
    )
    print_message "$YELLOW" "Checksum verified for $(basename "$destination")"
    echo ""
    return 0
}

copy_if_changed() {
    local src="$1"
    local dest="$2"
    if [[ -f "$dest" ]]; then
        if cmp -s "$src" "$dest"; then
            print_message "$GREEN" "No change for $dest"
            return
        else
            # Optionally backup old version
            #cp -p "$dest" "${dest}.bak.$(date +%Y%m%d_%H%M%S)"
            # print_message "$YELLOW" "Backing up and replacing $dest"
            print_message "$YELLOW" "Replacing $dest"
        fi
    fi
    cp -p "$src" "$dest"
}

# Function to create directory with proper permissions
create_directory() {
    local dir=$1
    local perms=${2:-755}

    if [[ ! -d "$dir" ]]; then
        mkdir -p "$dir" || error_exit "Failed to create directory: $dir"
        chmod "$perms" "$dir" || error_exit "Failed to set permissions on: $dir"
        print_message "$GREEN" "Created directory: $dir"
    fi
}

# Function to install for cPanel
install_cpanel() {
    print_message "$YELLOW" "Installing for cPanel..."
    echo ""

    # Create required directories
    create_directory "/var/cpanel/apps"
    create_directory "/usr/local/cpanel/whostmgr/docroot/cgi/$SCRIPT_NAME"
    create_directory "/usr/local/cpanel/whostmgr/docroot/templates/$SCRIPT_NAME"

    # Create temporary directory for downloads
    TEMP_DIR=$(mktemp -d) || error_exit "Failed to create temporary directory"

    # Download files to temporary directory first
    print_message "$BRIGHTBLUE" "Downloading files..."
    echo ""

    download_file_with_checksum "$BASE_URL/index.php" "$TEMP_DIR/index.php" || error_exit "Failed to get script file"
    download_file_with_checksum "$BASE_URL/$SCRIPT_NAME.conf" "$TEMP_DIR/$SCRIPT_NAME.conf" || error_exit "Failed to get .conf file"
    download_file_with_checksum "$BASE_URL/$SCRIPT_NAME.png" "$TEMP_DIR/$SCRIPT_NAME.png" || error_exit "Failed to get PNG file"

    # Move files to final destination
    print_message "$BRIGHTBLUE" "Installing files..."
    copy_if_changed "$TEMP_DIR/index.php" "/usr/local/cpanel/whostmgr/docroot/cgi/$SCRIPT_NAME/index.php" || error_exit "Failed to copy index.php"

    copy_if_changed "$TEMP_DIR/$SCRIPT_NAME.conf" "/usr/local/cpanel/whostmgr/docroot/cgi/$SCRIPT_NAME/$SCRIPT_NAME.conf" || error_exit "Failed to copy config"

    copy_if_changed "$TEMP_DIR/$SCRIPT_NAME.png" "/usr/local/cpanel/whostmgr/docroot/cgi/$SCRIPT_NAME/$SCRIPT_NAME.png" || error_exit "Failed to copy image"

    # Set permissions
    chmod 755 "/usr/local/cpanel/whostmgr/docroot/cgi/$SCRIPT_NAME/index.php" || error_exit "Failed to set permissions"

    # Copy image to addon_plugins if directory exists
    if [[ -d "/usr/local/cpanel/whostmgr/docroot/addon_plugins" ]]; then
        copy_if_changed "$TEMP_DIR/$SCRIPT_NAME.png" "/usr/local/cpanel/whostmgr/docroot/addon_plugins/$SCRIPT_NAME.png" || print_message "$YELLOW" "Warning: Failed to copy image to addon_plugins"
    fi

    # Register plugin
    echo ""
    print_message "$BRIGHTBLUE" "Registering plugin..."
    if [[ -x "/usr/local/cpanel/bin/register_appconfig" ]]; then
        if [[ -f "/var/cpanel/apps/$SCRIPT_NAME.conf" ]]; then
            print_message "$YELLOW" "Plugin already registered."
        else
            /usr/local/cpanel/bin/register_appconfig "/usr/local/cpanel/whostmgr/docroot/cgi/$SCRIPT_NAME/$SCRIPT_NAME.conf" || error_exit "Failed to register plugin"
        fi
    else
        error_exit "register_appconfig not found"
    fi
}

# Function to install for CWP
install_cwp() {
    print_message "$YELLOW" "Installing for CWP..."
    echo ""

    # Verify CWP directories exist
    [[ -d "/usr/local/cwpsrv/htdocs/resources/admin/modules" ]] || error_exit "CWP modules directory not found"

    # Create temporary directory for downloads
    TEMP_DIR=$(mktemp -d) || error_exit "Failed to create temporary directory"

    # Download files to temporary directory first

    print_message "$BRIGHTBLUE" "Downloading files..."
    echo ""

    download_file_with_checksum "$BASE_URL/$SCRIPT_NAME.php" "$TEMP_DIR/$SCRIPT_NAME.php" || error_exit "Failed to get script file"
    download_file_with_checksum "$BASE_URL/imh-plugins.php" "$TEMP_DIR/imh-plugins.php" || error_exit "Failed to get include file"
    download_file_with_checksum "$BASE_URL/$SCRIPT_NAME.png" "$TEMP_DIR/$SCRIPT_NAME.png" || error_exit "Failed to get PNG file"

    # Remove immutable attributes if they exist
    print_message "$BRIGHTBLUE" "Preparing directories..."
    if command_exists chattr; then
        chattr -ifR /usr/local/cwpsrv/htdocs/admin 2>/dev/null || true
    fi
    echo ""

    # Copy files to destination
    print_message "$BRIGHTBLUE" "Installing files..."
    copy_if_changed "$TEMP_DIR/$SCRIPT_NAME.php" "/usr/local/cwpsrv/htdocs/resources/admin/modules/$SCRIPT_NAME.php" || error_exit "Failed to copy PHP file"
    chmod 755 "/usr/local/cwpsrv/htdocs/resources/admin/modules/$SCRIPT_NAME.php" || error_exit "Failed to set permissions"

    # Create directories if they don't exist
    create_directory "/usr/local/cwpsrv/htdocs/admin/design/img"
    create_directory "/usr/local/cwpsrv/htdocs/admin/design/js"
    create_directory "/usr/local/cwpsrv/htdocs/resources/admin/include"

    # Move additional files
    copy_if_changed "$TEMP_DIR/$SCRIPT_NAME.png" "/usr/local/cwpsrv/htdocs/admin/design/img/$SCRIPT_NAME.png" || print_message "$YELLOW" "Warning: Failed to copy image"

    copy_if_changed "$TEMP_DIR/imh-plugins.php" "/usr/local/cwpsrv/htdocs/resources/admin/include/imh-plugins.php" || error_exit "Failed to copy include file"

    # Update 3rdparty.php
    update_cwp_config
}

# No control panel install
install_plain() {
    print_message "$GREEN" "Installing plain (no control panel)..."
    echo ""

    local dest="/root/$SCRIPT_NAME"
    create_directory "$dest" 700

    TEMP_DIR=$(mktemp -d) || error_exit "Failed to create temporary directory"

    print_message "$BRIGHTBLUE" "Downloading files..."
    download_file_with_checksum "$BASE_URL/index.php" "$TEMP_DIR/index.php" || error_exit "Failed to get script file"
    download_file_with_checksum "$BASE_URL/$SCRIPT_NAME.png" "$TEMP_DIR/$SCRIPT_NAME.png" || error_exit "Failed to get PNG file"

    print_message "$BRIGHTBLUE" "Installing files..."
    copy_if_changed "$TEMP_DIR/index.php" "$dest/index.php"
    copy_if_changed "$TEMP_DIR/$SCRIPT_NAME.png" "$dest/$SCRIPT_NAME.png"
    chmod 700 "$dest/index.php"
    chmod 600 "$dest/$SCRIPT_NAME.png"

    print_message "$GREEN" "Plain install complete. Files installed to $dest"
}

# Function to update CWP configuration
update_cwp_config() {
    local target="/usr/local/cwpsrv/htdocs/resources/admin/include/3rdparty.php"
    local include_file="/usr/local/cwpsrv/htdocs/resources/admin/include/imh-plugins.php"
    local include_statement="include('${include_file}');"

    # ---- Safety Checks ----
    [[ -f "$target" ]] || error_exit "Target file does not exist: $target"
    [[ -r "$target" && -w "$target" ]] || error_exit "Cannot read/write: $target"
    [[ -f "$include_file" ]] || error_exit "Include file does not exist: $include_file"

    # ---- Skip if already present ----
    if grep -Eq "include\s*\(['\"]${include_file}['\"]\)|require(_once)?\s*\(['\"]${include_file}['\"]\)" "$target"; then
        print_message "$YELLOW" "Include line already exists. No changes made."
        return 0
    fi

    local temp_file
    temp_file=$(mktemp "${target}.XXXXXX") || error_exit "Failed to create temp file"

    # ---- Modify File ----
    if grep -q "<\?php" "$target"; then
        if grep -Eq "<\?php.*\?>" "$target"; then
            # Case 1: One-liner <?php ... ?>
            # Insert after <?php and before existing content
            sed -E "s#(<\?php)(.*)(\?>)#\1\n${include_statement}\n\2\n\3#" "$target" > "$temp_file"
        elif grep -q "?>" "$target"; then
            # Case 2: Multi-line with closing tag
            awk -v inc="$include_statement" '
                BEGIN {done=0}
                /<\?php/ { print; next }
                /\?>/ && !done { print inc; done=1 }
                { print }
            ' "$target" > "$temp_file"
        else
            # Case 3: No closing tag
            awk -v inc="$include_statement" '
                /<\?php/ { print; print inc; next }
                { print }
            ' "$target" > "$temp_file"
        fi
    else
        # Case 4: No PHP tags at all
        {
            echo "<?php"
            echo "$include_statement"
            cat "$target"
        } > "$temp_file"
    fi

    # ---- Validate PHP Syntax ----
    if command -v php >/dev/null 2>&1; then
        if ! php -l "$temp_file" >/dev/null 2>&1; then
            rm -f "$temp_file"
            error_exit "Modified file has PHP syntax errors. Aborting."
        fi
    fi

    # ---- Replace Original ----
    mv "$temp_file" "$target" || error_exit "Failed to update $target"
    print_message "$GREEN" "Successfully added include statement inside PHP block in $target"
}

# Main installation function
main() {
    print_message "$RED" "Installing $SCRIPT_NAME plugin v$SCRIPT_VERSION..."
    echo ""

    # Check prerequisites
    check_root

    # Check for required commands
    for cmd in wget mktemp; do
        if ! command_exists "$cmd"; then
            error_exit "Required command not found: $cmd"
        fi
    done

    # Validate base URL is accessible
    validate_url "$BASE_URL/index.php"

    # Detect control panel
    local panel=$(detect_control_panel)

    case "$panel" in
    "cpanel")
        install_cpanel
        ;;
    "cwp")
        install_cwp
        ;;
    *)
        install_plain
        ;;
    esac

    echo ""
    print_message "$BLUE" "Installation complete!"
}

# Run main function
main "$@"
</file>

</files>
